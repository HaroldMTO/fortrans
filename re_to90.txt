# notes :
# - le séparateur des RE est ';'
# - les champs des RE sont : recherche, remplacement et en option TRUE (RE perl)
# - rewrite.R commence par concaténer les chaines, en supprimant aussi les '!'
# - l'ordre des RE importe, du fait de dépendances
# - RE dont les suivantes sont fortement dépendantes ;
#  . suppression des tabulations et espaces de fin de ligne
#  . suppression des commentaires, sauf directives et, en début de ligne, motif '!$!'
#  . concaténation des lignes continuées (dangereux si commentaires presents)
#  . espacement des structures de controle

# conversion tab en espace pour utiliser ' ' au lieu de '\s'
# car '\n' est dans '\s'
\t; 

# suppression include interface
\n *#include +\"[^\n]*\.intfb\.h\";

# suppression espaces de fin de ligne
 +(\n|$);\1

# suppression commentaires Fortran 90 (lignes entières non vides)
(^|\n)(?: *!+\n+)+;\1\n
(^|\n)(?: *!(?! *((dec|dir|pgi)\$|\$omp|\$!))[^\n]+\n*)+;\1;TRUE

# suppression commentaires Fortran 90 (fin de ligne)
(^|\n)((?: *[^\n! ]+)+) *!+[^\n]*;\1\2

# concaténation des lignes continuées (sur fin de ligne)
&(?: *![^\n]*)?\n+ *&?(?! *! *((dec|dir|pgi)\$|\$omp)) *;;TRUE
\n {5}[1-9&*+];

# suppression d'espaces avant/après virgule, affectations et opérateurs maths
 *(\*\*|=>|[=,+/*\-]) *;\1

# reespacement affectations ('=' ou '=>') en instruction simple
(\n *(?:if *\([^\n]+\) *)?\w+(?:%\w+|\((?:[^\n()=]+|\([^\n()=]+\))+\))*) *(=>?) *;\1 \2 

# resuppression d'espaces sur indices boucles do et déclarations
#(\n *(?:\d+ +|\w+ *: *)*do \w+) *= *;\1=

# suppression d'espaces avant/après parenthèses
\( +;(
 +\);)

# espacement entre parenthèse fermante et mot
\) *(\w);) \1

# conversion/espacement opérateurs binaires f77
 *(\.eq\.|==) *; == 
 *(\.ne\.|/=) *; \/= 
 *(\.le\.|<=) *; <= 
 *(\.ge\.|>=) *; >= 
 *(\.lt\.) *; < 
 *(\.gt\.) *; > 

# suppression typage 'real' des entiers, sauf cas de division entière
(\d+)\.0?_jpr[bdh](?!/\(*(\w+%)*[ikn]);\1;TRUE
(\D)\.0_jpr[bdh](?!/\(*(\w+%)*[ikn]);\10;TRUE
([^.]\d+)_jpr[bdh](?!/\(*(\w+%)*[ikn]);\1;TRUE

# espacement association et déclaration f90
# *=> *;=>
 *: ;: 
 *:: *([^\n]); :: \1
([^=>]) *\.(not|and|x?or)\. *;\1.\2.

# espacement structures de controle
\<do *(while|concurrent)\>;do \1
(\n *else) *(if|where)\>;\1 \2
\<(if|where|while) *\(;\1 (

# espacement déclaration de variables sur types simples avec kind, types dérivées et class ('type(' = declaration variable)
(\n *(integer|real|double precision|character|complex|logical|type|class)) *\(;\1(

# espacement déclaration de type dérivés
\n+( *type\> *[^(][^\n]+)\n+;\n\n\1\n

# suppression parenthèses inutiles : entre comparaison et .and. (2 fois), entre double () et en affectation
(\(|\.(and|x?or)\.)\(((\w+(\([^()"']+\))?|%| +|[/=<>]=|<|>|\.and\.|\.not\.)+)\)(\)|\.(and|x?or)\.);\1\3\6
(\(|\.(and|x?or)\.)\(((\w+(\([^()"']+\))?|%| +|[/=<>]=|<|>|\.and\.|\.not\.)+)\)(\)|\.(and|x?or)\.);\1\3\6
\((\([^()"']+\))\);\1
(\n *(\w+(\([^()"']+\))?|%)+) *= *\(([^()"'/][^()"']+)\) *\n;\1 = \4\n

# début d'unités de programme et interfaces + fonctions
(^|\n)\n* *(program|(sub)?module|associate|(((im)?pure|elemental|recursive) +)*subroutine|(abstract +)?interface)\> +([^\n]+)\n+;\1\n\2 \8\n
(^|\n)\n* *((((im)?pure|elemental|recursive|(integer|real|double precision|character|complex|logical|type|class)(\*\d+|\([^()]+\))?) +)*function)\> +([^\n]+)\n+;\1\n\2 \8\n

# début et alternatives de structures de contrôle
(\n *(\d+ +|\w+ *: *)*((do|select)\>[^\n]*|if\>[^\n]+\) *then\>|where\> *\(([^()"']+|(\(([^()"']+|\([^()"']+\))+\))+)+\)))\n+;\1\n
\n+( *(else|contains)\>[^\n]*)\n+;\n\1\n

# suppression lignes vides en fin de structures et espacement 'end'
\n+( *end) *(do|if|where|select|(sub)?module|function|subroutine|program|interface|type|associate)\> *[^\n]*;\n\1 \2
\n+( *(end|contains))\>;\n\1

# suppression étiquettes structures 'do' Fortran 77
(\n *(?:\d+ +|\w+ *: *)?do) +([0-9]{1,5}) +(.+)\n+ *\2 +continue\>;\1 \3\nend do

# suppression Dr Hook (use, call et variable z?hook_handle, mais pas les autres)
\n+ *if *\(lhook\) *call +dr_hook *\([^()]+\)[^\n]*;
\n+ *if *\(lhook\) *then\n+ *call +dr_hook *\([^()]+\)[^\n]*\n+ *end *if\>[^\n]*;

# suppression espaces multiples en milieu de ligne
([^^\n])  +;\1 

# suppression lignes vides multiples (début, fin et milieu de fichier)
^[\n ]+;
[\n ]+$;\n
\n[\n ]+\n;\n\n
